<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:util="http://www.springframework.org/schema/util"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="  
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd  
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd  
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    
<!-- <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "> -->
		
		
		
		
  

	<!-- 可以扫描controller、service、...
	这里让扫描controller，指定controller的包
	 -->
	<context:component-scan base-package="com.face.controller"></context:component-scan>
	
		
	<!--注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	 
	 
	 
	<!--  。。。。。。。。。。。。。。。。。。。。。。。。。。start。。。。。。。。。。。。。。。。。。。。。。。。。。 -->
	<mvc:annotation-driven ></mvc:annotation-driven>
	<!-- 配置路径扩展名映射的媒体类型 -->
	<!-- <bean name="pathExtensionContentNegotiationStrategy"
		class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
		<constructor-arg>
			<props> -->
				<!-- if romePresent -->
			<!-- 	<prop key="atom">application/atom+xml</prop>
				<prop key="rss">application/rss+xml</prop> -->
				<!-- endif -->
				<!-- if jackson2Present || jacksonPresent -->
		<!-- 		<prop key="json">application/json</prop> -->
				<!-- endif -->
				<!-- if jaxb2Present -->
				<!-- <prop key="xml">application/xml</prop> -->
				<!-- endif -->
		<!-- 	</props>
		</constructor-arg>
	</bean> -->

	<!-- 配置映射媒体类型的策略 -->
<!-- 	<bean name="mvcContentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManager">
		<constructor-arg>
			<list>
				<ref bean="pathExtensionContentNegotiationStrategy" />
			</list>
		</constructor-arg>
	</bean>
 -->
	<!-- 配置方法级别的@RequestMapping处理器 -->
<!-- 	<bean name="requestMappingHandlerMapping"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<property name="order" value="0" />
		<property name="contentNegotiationManager" ref="mvcContentNegotiationManager" />
	</bean>
 -->
	<!-- 配置数据转换服务，默认使用格式化数据转换服务，可以对日期和数字进行格式化 -->
	<!-- <bean name="conversionService"
		class="org.springframework.format.support.DefaultFormattingConversionService">
		<constructor-arg index="0">
			<null></null>
		</constructor-arg>
		<constructor-arg index="1">
			<value>true</value>
		</constructor-arg>
	</bean>

	<bean name="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"></bean>
 -->
	<!-- 配置数据绑定，通过转换服务实现绑定，如果包含jsr303实现还将进行校验 -->
	<!-- <bean name="webBindingInitializer"
		class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversionService" />
		
		<property name="validator" ref="validator" />
	
	</bean>

	<bean name="byteArrayHttpMessageConverter"
		class="org.springframework.http.converter.ByteArrayHttpMessageConverter"></bean>
	<bean name="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="writeAcceptCharset" value="false" />
	</bean>
	<bean name="resourceHttpMessageConverter"
		class="org.springframework.http.converter.ResourceHttpMessageConverter"></bean>
	<bean name="sourceHttpMessageConverter"
		class="org.springframework.http.converter.xml.SourceHttpMessageConverter"></bean>
	<bean name="allEncompassingFormHttpMessageConverter"
		class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter"></bean>
	<bean name="atomFeedHttpMessageConverter"
		class="org.springframework.http.converter.feed.AtomFeedHttpMessageConverter"></bean>
	<bean name="rssChannelHttpMessageConverter"
		class="org.springframework.http.converter.feed.RssChannelHttpMessageConverter"></bean>
	<bean name="jaxb2RootElementHttpMessageConverter"
		class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"></bean>
	<bean name="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
	<bean name="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
 -->
	<!-- 配置@RequestBody，@ResponseBody注解可用的转换器 -->
	<!-- <util:list id="messageConverters"
		list-class="org.springframework.beans.factory.support.ManagedList">
		<ref bean="byteArrayHttpMessageConverter" />
		<ref bean="stringHttpMessageConverter" />
		<ref bean="resourceHttpMessageConverter" />
		<ref bean="sourceHttpMessageConverter" />
		<ref bean="allEncompassingFormHttpMessageConverter" /> -->
		<!-- if romePresent -->
		<!-- <ref bean="atomFeedHttpMessageConverter" /> -->
		<!-- <ref bean="rssChannelHttpMessageConverter" /> -->
		<!-- endif -->
		<!-- if jaxb2Present -->
		<!-- <ref bean="jaxb2RootElementHttpMessageConverter" /> -->
		<!-- endif -->
		<!-- if jackson2Present -->
		<!-- <ref bean="mappingJackson2HttpMessageConverter" /> -->
		<!-- endif -->
		<!-- if jacksonPresent -->
		<!-- <ref bean="mappingJacksonHttpMessageConverter" /> -->
		<!-- endif -->
	<!-- </util:list> -->

	<!-- 将任意类型的Controller适配为Handler -->
	<!-- <bean name="requestMappingHandlerAdapter"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="contentNegotiationManager" ref="mvcContentNegotiationManager" />
		<property name="webBindingInitializer" ref="webBindingInitializer" />
		<property name="messageConverters" ref="messageConverters" />
	</bean>
 -->
	<!-- 这个拦截器暴露转换器服务让spring:bind和spring:eval标签可用 -->
	<!-- <bean name="csInterceptor"
		class="org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor">
		<constructor-arg index="0">
			<ref bean="conversionService" />
		</constructor-arg>
	</bean> -->

	<!-- 现在所有拦截器都必须设定响应的路径映射 -->
	<!-- <bean name="mappedCsInterceptor"
		class="org.springframework.web.servlet.handler.MappedInterceptor">
		<constructor-arg index="0">
			<null></null>
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="csInterceptor" />
		</constructor-arg>
	</bean> -->

	<!-- 使用@ExceptionHandler注解的方法来处理Exception，优先级为0（最高） -->
	<!-- <bean name="exceptionHandlerExceptionResolver"
		class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
		<property name="contentNegotiationManager" ref="mvcContentNegotiationManager" />
		<property name="messageConverters" ref="messageConverters" />
		<property name="order" value="0" />
	</bean> -->

	<!-- 如果抛出的Exception类带有@ResponseStatus注解，响应返回该注解的Http状态码，优先级为1 -->
	<!-- <bean name="responseStatusExceptionResolver"
		class="org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver">
		<property name="order" value="1" />
	</bean> -->

	<!-- SpringMvc内部异常处理 -->
	<!-- <bean name="defaultExceptionResolver"
		class="org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver">
		<property name="order" value="2" />
	</bean> -->
	<!--  。。。。。。。。。。。。。。。。。。。。。。。。。。end。。。。。。。。。。。。。。。。。。。。。。。。。。 -->
	
	
	
	<!-- 自定义异常处理，SimpleMappingExceptionResolver这个类可以是个空类，但是要写，方便在java代码里面使用 -->  
    <bean id="exceptionResolver" class="com.face.interceptor.MappingExceptionResolver">
      <property name="exceptionMappings">  
        <props>  
          <prop key="com.face.interceptor.SessionTimeoutException">Login</prop>  
           <prop key="java.lang.Throwable">errors/err</prop>
            <prop key="java.lang.Exception">errors/error</prop>
            <prop key="java.lang.Throwable">errors/error</prop>
             
        </props>
      </property>
        
      <!--  <property name="statusCodes">     
         <props>     
             <prop key="errors/error500">500</prop>     
             <prop key="errors/error404">404</prop>     
         </props>  
         </property> -->
         
         
    </bean>  
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- <mvc:default-servlet-handler />将静态资源的处理经由Spring MVC框架交回Web应用服务器处理。而<mvc:resources />更进一步，由Spring MVC框架自己处理静态资源，并添加一些有用的附加值功能。 -->
	<!-- 一般Web应用服务器默认的Servlet名称是"default"，因此DefaultServletHttpRequestHandler可以找到它。如果你所有的Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定： 

<mvc:default-servlet-handler default-servlet-name="所使用的Web服务器默认使用的Servlet名称" />  -->

	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/images/" mapping="/images/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/fonts/" mapping="/fonts/**"/>
	<mvc:resources location="/img/" mapping="/img/**"/>
	<mvc:resources location="/uploadface/" mapping="/uploadface/**"/>
	<mvc:resources mapping="/apidoc/**" location="/apidoc/"/>
	<mvc:resources mapping="/api-docs/**" location="/api-docs/"/>
	
	<!-- 拦截器配置 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.face.interceptor.LoginInterceptor">
			  <property name="allowUrls">  
	            <list>  
	              <value>/errors/</value>  
	              <value>/userinfos/userLogin</value>  
	              <value>/userinfos/userRegister</value>  
	              <value>/js</value>  
	              <value>/css</value>  
	              <value>/image</value>  
	              <value>/images</value>  
	              <value>/img</value>  
	               <value>/fonts</value>  
	               <value>/apidoc</value>  
	               <value>/api-docs</value>  
	            </list>  
	          </property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
	 
	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
	<!-- 配置swagger,swagger-ui 相关 --> 
	<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />
	
</beans>